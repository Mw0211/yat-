from playsound import playsound
playsound('C:/Users/matthew.wilson1/Desktop/Matt.mp3',(0))
print ("Recreation of the game called Yahtzee. This recreation is made by Matthew Wilson")
print ("\n")
print ("Welcome to Yahtzee. The rules are simple. The game consists of a number of rounds. In each round, a player gets three rolls of the dice, although they can choose to end their turn after one or two rolls. After the first roll the player can save any dice they want and re-roll the other dice. This procedure is repeated after the second roll. The player has complete choice as to which dice to roll. They can re-roll a die for the third roll that was not rolled on the second roll. The Yahtzee scorecard contains 13 different category boxes and in each round, after the third roll, the player must choose one of these categories. The score entered in the box depends on how well the five dice match the scoring rule for the category. Details of the scoring rules for each category are given below. As an example, one of the categories is called Three of a Kind. The scoring rule for this category means that a player only scores if at least three of the five dice are the same value. The game is completed after 13 rounds by each player, with each of the 13 boxes filled. The total score is calculated by summing all thirteen boxes, together with any bonuses.")
print ("\n")
import random 
import pickle 
import os 
#from colorama import *
import time
#init(autoreset=True)
    
playerScore = 0 
users_moves = {} 
bonus_given = False 
yahtzee_won = False 

def roll():
    global current_dice
    current_dice = rolldie(5) #for first roll
    replacing = []
    replacing_indexes = []
    rolls = 0
    print( "Your first roll was:", current_dice,"\n")
    for x in range (0,5):
        dice_display(current_dice[x])
    result = input("Do you want to keep these dice? (y or n) ")
    for x in range (0,5):
        dice_display(current_dice[x])
    result = (result.lower()).strip()
    while result not in ("y", "n"):
        result = input("\nYou probably mistyped something. Try again. ")
        result = (result.lower().strip())
    if result == "n":
        while rolls != 2:
            if rolls != 0: #Only show this for the second and third roll
                print("Your current dice are:", current_dice, "\n")
                for x in range (0,5):
                    dice_display(current_dice[x])
                result = input("Do you want to keep these dice (y or n) (default is n)? ")
                result = (result.lower()).strip()
                if result == "y":
                    break;
            indexes = input("Type the ordinal numbers (first would be 1, second would be 2, etc)\nof dice to replace. (no spaces) ")

            try:
                replaced_dice = list(indexes)
                for index in replaced_dice:
                    skip = False
                    #subtracting 1 to convert ordinal numbers to indexes in an array
                    array_index = int(index) - 1
                    if array_index < 0:
                        raise IndexError("That wasn't an ordinal number!")
                    #Error checking to make sure replaced dice are only replaced once
                    while array_index in replacing_indexes:
                        print("Sorry, you are already replacing " + str(current_dice[array_index]) + ".\n")
                        skip = True
                        break
                    if skip:
                        continue
                    replacing.append(current_dice[array_index])
                    replacing_indexes.append(array_index)
            except IndexError:
                print("\nYou only have 5 dice!\n")
                replacing = []
                replacing_indexes = []
                continue
            except:
                 print("\nYou probably mistyped something. Try again.\n")
                 replacing = []
                 replacing_indexes = []
                 continue
            if len(replacing) == 0:
                print("Keeping all dice ...")
                break;
            print("Replacing", replacing, "")
            keeping = []
            #Keep the ones we are not replacing
            for index in (set([0,1,2,3,4]) - set(replacing_indexes)):
                keeping.append(current_dice[index])
            #Use the number of dice replacing to replace those dice
            new_dice = rolldie(len(replacing))
            #Add the newly rolled dice to the ones we kept originally
            for new_die in new_dice:
                keeping.append(new_die)
            #Update and reset attributes for next roll
            current_dice = keeping
            replacing = []
            replacing_indexes = []
            rolls += 1
    print("\nYour new roll was: %s\n" %(current_dice))
    for x in range (0,5):
        dice_display(current_dice[x])

def dice_display(x):
    if x == 1:
       print(" _______")
       print("|       |")
       print("|       |")
       print("|   1   |")
       print("|       |")
       print("|_______|")
        
    if x == 2:
       print(" _______")
       print("|       |")
       print("| 2     |")
       print("|       |")
       print("|     2 |")
       print("|_______|")
        
    if x == 3:
       print(" _______")
       print("|       |")
       print("| 3     |")
       print("|   3   |")
       print("|     3 |")
       print("|_______|")
        
    if x == 4:
       print(" _______")
       print("|       |")
       print("| 4   4 |")
       print("|       |")
       print("| 4   4 |")
       print("|_______|")

    if x == 5:
       print(" _______")
       print("|       |")
       print("| 5   5 |")
       print("|   5   |")
       print("| 5   5 |")
       print("|_______|")

    if x == 6:
       print(" _______")
       print("|       |")
       print("| 6   6 |")
       print("| 6   6 |")
       print("| 6   6 |")
       print("|_______|")


def rolldie(numToRoll):
    diechoices = ['1', '2', '3', '4', '5', '6']
    result = []
    for x in range(numToRoll):
        result.append(int(random.choice(diechoices)))
    return result

def countDice(number):
    counter = 0
    for n in current_dice:
        if n == number:
            counter = counter + 1
    score = counter * number
    return score

def choosePoints():
    key = allOptions[0]
    value = allOptions[1]
    bestOption = max(value)
    counter = 1;
    for index in range(0, len(key)):
        if value[index] == bestOption:
            print(str(counter) + ":\t")
            print(str(key[index]) + ":\t" + str(value[index]) + "points")
        else:
            print(str(counter) + ":\t", end="")
            print(str(key[index]) + ":\t" + str(value[index]) + "points.")
        counter += 1
    global playerScore
    global allKeysTaken
    option = input("\nHere are all of your options. Select an option by entering its sequential number.\n")
    while True:
        try:
            option = key[int(option) - 1]
            option = (option.strip()).lower()
            for index in range(0, len(key)):
                keycopy = (key[index].strip(" ")).lower()
                if keycopy == option:
                    playerScore = playerScore + int(value[index])
                    users_moves[key[index]] = int(value[index])
                    return
        except:
            option = input("You probably mistyped something. Try again.\n")

def checkFullHouse():
    for num in current_dice:
        if current_dice.count(num) == 3:
            for second_num in current_dice:
                if current_dice.count(second_num) == 2:
                    return 25
    return 0

def ofAKind(numOfKind):
    global yahtzee_won
    for number in current_dice:
        if current_dice.count(number) == numOfKind:
            if numOfKind == 5: #Yahtzee
                if yahtzee_won: #Second Yahtzee
                    return 100;
                else: #First Yahtzee
                    yahtzee_won = True
                    return 50
            else:
                return numOfKind * number
    return 0

def checkStraight(smallOrLarge):
    sortedArray = list(set(current_dice))
    if smallOrLarge == 1: #large
        if [1,2,3,4,5] == sortedArray or [2,3,4,5,6] == sortedArray:
            return 40
    else:
        if all(x in sortedArray for x in [1,2,3,4]) or all(x in sortedArray for x in [2,3,4,5]) or all(x in sortedArray for x in [3,4,5,6]):
            return 30
    return 0

def removeTakenOptions():
    key = allOptions[0]
    value = allOptions[1]
    index = len(key) - 1
    while index >= 0:
        if "Pass          " not in key[index]: 
            if value[index] == 0:
                del key[index]
                del value[index]
        index -= 1
    global users_moves
    for takenKey in users_moves.keys():
        index = len(key) - 1
        while index >= 0:
            if "Pass          " not in takenKey: 
                if takenKey is key[index]:
                    del key[index]
                    del value[index]
            index -= 1

def over63():
    global bonus_given
    if bonus_given:
        return False;
    global users_moves
    sumOfFirstSix = 0
    arrayToCheck = ['Ones          ', 'Twos          ', 'Threes        ',
                     'Fours         ', 'Fives         ', 'Sixes         ']
    if all(x in list(users_moves.keys()) for x in arrayToCheck):
        for index in arrayToCheck:
            sumOfFirstSix += int(users_moves[index])
    if sumOfFirstSix >= 63:
        bonus_given = True
        return True
    else:
        return False

def printScoreCard(allOptions):
    global playerScore
    printedBonus = True
    print("Yahtzee Score Card")
    for key in allOptions:
        if key == "Over 63 = +35 ":
            print ("-" + key + "|\t", end = "")
        elif key != "Pass          ":
            print ("-" + key + "|\t", end = "")
        for k, v in users_moves.items():
            if k == key and k != "Pass          ": #already taken
                print(str(v), end = "")
            if key == "Over 63 = +35 ":
                if over63():
                    playerScore += 35
                if bonus_given and printedBonus:
                    print("-", "35", end = "")
                    printedBonus = False
        print()
    print("CURRENT SCORE: " + str(playerScore))
    print("\n")

def main(): 
    for turnNumber in range(2):
        print("Turn %s started.\n" %(turnNumber + 1))
        roll()
        
        allOptions = [   ["Ones          ", "Twos          ", "Threes        ",
                         "Fours         ", "Fives         ", "Sixes         ",
                         "Over 63 = +35 ",
                         "3 of a kind   ", "4 of a kind   ", "Full House    ",
                         "Small Straight", "Large Straight", "Yahtzee       ",
                         "Chance        ", "Pass          "],
                        [countDice(1), countDice(2), countDice(3),
                         countDice(4), countDice(5), countDice(6), 0,
                         ofAKind(3), ofAKind(4), checkFullHouse(),
                         checkStraight(0), checkStraight(1), ofAKind(5),
                         sum(current_dice), 0]]
        allKeys = allOptions[0].copy()
        choosePoints()
        time.sleep(0.5)
        os.system('cls' if os.name=='nt' else 'clear') 
        print("\nTurn", turnNumber + 1, "completed.")
        print("Here is your current Score Card:\n\n")
        printScoreCard(allKeys)


    

print("Game Over! Your score was: " + str(playerScore))
p = str.lower(input("Would you like to restart?-->(y/n)"))
if p[0] == 'n':
    exit()
if p[0] == 'y':
    print('\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n')
    main()

main()


